(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? x)
  (eq? (car x) 'leaf))
(define symbol-leaf cadr)
(define weight-leaf caddr)
;(define leaf (make-leaf 'a 1))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define symbols
    (lambda (x)
      (if (leaf? x)
          (list (symbol-leaf x))
          (caddr x))))
(define weight
    (lambda (x)
      (if (leaf? x)
          (weight-leaf x)
          (cadddr x))))
(define left-branch car)
(define right-branch cadr)
(define (decode bits tree)
  (define (decode-1 bits next-branch)
    (cond ((null? bits) (quote ()))
          (else (let ((new-branch (choose-branch (car bits) next-branch)))
                     (if (leaf? new-branch)
                         (cons (symbol-leaf new-branch) (decode-1 (cdr bits) tree))
                         (decode-1 (cdr bits) new-branch))))))
  (decode-1 bits tree))
(define (choose-branch bit tree)
  (cond ((= bit 1) (right-branch tree))
        ((= bit 0) (left-branch tree))
        (else (error "error bit"))))

(define tree (make-code-tree (make-code-tree (make-code-tree (make-leaf 'A 1)
                                                             (make-leaf 'b 2))
                                             (make-leaf 'c 3))
                             (make-code-tree (make-leaf 'd 4)
                                             (make-code-tree (make-leaf 's 6)
                                                             (make-code-tree (make-leaf 'r 3)
                                                                             (make-code-tree (make-leaf 'z 1)
                                                                                             (make-leaf 'x 9)))))))
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set) (adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
  (cond ((null? pairs) (quote ()))
        (else (let ((pair (car pairs)))
                   (adjoin-set (make-leaf (car pair) (cadr pair))
                               (make-leaf-set (cdr pairs)))))))
(define (encode msgs tree)
  (cond ((null? msgs) (quote ()))
        (else (append (encode-symbol (car msgs) tree)
                      (encode (cdr msgs) tree)))))
(define (encode-symbol symbol tree)
  (let ((left-tree (left-branch tree))
        (right-tree (right-branch tree)))
       (let ((left-tree-symbols (symbols left-tree))
             (right-tree-symbols (symbols right-tree)))
            (cond ((contain? symbol left-tree-symbols)
                   (if (leaf? left-tree)
                       (list 0)
                       (cons 0 (encode-symbol symbol left-tree))))
                  ((contain? symbol right-tree-symbols)
                   (if (leaf? right-tree)
                       (list 1)
                       (cons 1 (encode-symbol symbol right-tree))))
                  (else (error "error"))))))
(define (contain? x set)
  (cond ((null? set) #f)
        ((eq? x (car set)) #t)
        (else (contain? x (cdr set)))))

(define (genetate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (successive-merge leafs)
  (cond ((= 1 (length leafs)) (car leafs))
        (else (let ((new-code-tree (make-code-tree (car leafs) (cadr leafs)))
                    (non-leafs (cddr leafs)))
                   (successive-merge (adjoin-set new-code-tree non-leafs))))))
(define mypairs '((a 2) (na 16) (boom 1) (sha 3) (get 2) (yip 9) (job 2) (wah 1)))
;(make-leaf-set mypairs)
(define mytree (genetate-huffman-tree mypairs))
(encode '(sha na na na na na na na) mytree)
