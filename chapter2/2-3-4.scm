;huffman编码树
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (caddr (cdr tree))))
;(define (decode bits tree)
;  (if (null? bits)
;      (quote ())
;      (let ((next-branch (choose-branch (car bits) tree)))
;           (if (leaf? next-branch)
;               (cons (symbol-leaf next-branch)
;                     (decode (cdr bits) tree))
;               (decode (cdr bits) next-branch)))))
(define (decode bits tree)
    (define (decode-1 bits current-branch)
        (if (null? bits)
            '()
            (let ((next-branch
                    (choose-branch (car bits) current-branch)))
                (if (leaf? next-branch)
                    (cons (symbol-leaf next-branch)
                          (decode-1 (cdr bits) tree))
                    (decode-1 (cdr bits) next-branch)))))
    (decode-1 bits tree))

(define (choose-branch bit tree)
  (cond ((= bit 0) (left-branch tree))
        ((= bit 1) (right-branch tree))
        (else (error "bad bit"))))

(define (adjoin-set x set)
  (cond ((null? set) (quote ()))
        ((< (weight x) (weight (car set)))
         (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))

(define (make-leaf-set pairs)
  (if (null? pairs)
      (quote ())
      (let ((pair (car pairs)))
           (adjoin-set (make-leaf (car pair)
                                  (cadr pair))
                       (make-leaf-set (cdr pairs))))))

(define sample-tree
    (make-code-tree (make-leaf 'A 4)
                    (make-code-tree (make-leaf 'B 2)
                                    (make-code-tree (make-leaf 'D 1)
                                                    (make-leaf 'C 1)))))
(define sample-msg (list 0 1 1 0 0 1 0 1 0 1 1 1 0))

(define (encode msg tree)
  (if (null? msg)
      (quote ())
      (append (encode-symbol (car msg) tree)
              (encode (cdr msg) tree))))
(define (encode-symbol symbol tree)
  (if (not (contain? symbol (symbols tree)))
      (error "error")
      (let ((left-tree (left-branch tree))
            (right-tree (right-branch tree)))
           (if (contain? symbol left-tree)
               (if (leaf? left-tree)
                   (list 0)
                   (cons 0 (encode-symbol symbol left-tree)))
               (if (leaf? right-tree)
                   (list 1)
                   (cons 1 (encode-symbol symbol right-tree)))))))
(define (contain? x set)
  (cond ((null? set) #f)
        ((eq? x (car set)) #t)
        (else (contain? x (cdr set)))))

(encode '(a d a b b c a) sample-tree)
