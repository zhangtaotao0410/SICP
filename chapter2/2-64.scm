(load "2-3-3.scm")
(define (list-to-tree lst)
  (car (partial-tree lst (length lst))))
(define (partial-tree lst n)
  (if (= n 0)
      (cons (quote ()) lst)
      (let ((left-size (quotient (- n 1) 2)))
          (let ((left-result (partial-tree lst left-size)))
              (let ((left-tree (car left-result))
                    (non-left-lst (cdr left-result))
                    (right-size (- n (+ left-size 1))))
                   (let ((this-entry (car non-left-lst))
                         (right-result (partial-tree (cdr non-left-lst) right-size)))
                        (let ((right-tree (car right-result))
                              (remaining-lst (cdr right-result)))
                             (cons (make-tree this-entry left-tree right-tree) remaining-lst))))))))

(define a (list 1 2 3 4 5 6 7 8 9 10))
(list-to-tree a)
